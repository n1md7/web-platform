swagger: "2.0"
info:
  title: "Swagger API documentation"
  description: >
    This is an API documentation with all endpoint actions
  version: "1.0.0"
host: "localhost:8080"
schemes:
  - "http"
tags:
  - name: Users
    description: User related actions
  - name: Templates
    description: Template related actions
  - name: Template groups
    description: Template group related actions
  - name: Template group questions
    description: Template group question related actions
  - name: Assessment actions
    description: Assessment related actions
  - name: File upload
    description: File upload related actions
  - name: File download
    description: File download related actions
  - name: Version
    description: App version
  - name: Info
    description: App information related actions

paths:
  /api/v1/user/status:
    get:
      tags:
        - Users
      summary: "User token expiration"
      description: "Get User token expiration status in seconds"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: User expiration in seconds
          schema:
            type: number
            example: 123
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/user/token/refresh:
    get:
      tags:
        - Users
      summary: "Get auth refresh token"
      description: "Get new authentication token before old one expires"
      consumes:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: User expiration in seconds
          schema:
            type: string
            example: XXXXX.YYYYY.ZZZZZ
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/user/token/restore/{refresh-token}:
    get:
      tags:
        - Users
      summary: "Restore expired token"
      description: "Restore expired token with refresh token key"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: refresh-token
          description: Refresh token
          required: true
          schema:
            type: string
      responses:
        200:
          description: User expiration in seconds
          schema:
            type: object
            properties:
              jwt:
                type: string
                example: XXXXX.YYYYY.ZZZZZ
              refreshToken:
                type: string
                example: abcdefgh1234567890abcdefg
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'
  /api/v1/user/new:
    post:
      tags:
        - Users
      summary: "User registration"
      description: "Creates new user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - email
              - password
              - confirmPassword
              - role
            properties:
              email:
                type: "string"
                example: "username@email.com"
              role:
                type: string
                enum:
                  - basic
                  - supplier
                example: "user"
              password:
                type: "string"
                example: "secret123"
              confirmPassword:
                type: "string"
                example: "secret123"
      responses:
        201:
          description: Created
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'
  /api/v1/user/auth:
    post:
      tags:
        - Users
      summary: "Authentication request"
      description: "Authenticates user based on email and password"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "E-mail and password to authenticate"
          required: true
          schema:
            type: "object"
            required:
              - email
              - password
            properties:
              email:
                type: "string"
                example: "username@email.com"
              password:
                type: "string"
                example: "secret123"
              rememberMe:
                type: "boolean"
                example: false
                default: false
      responses:
        200:
          description: "Credentials are correct"
          schema:
            type: "string"
        401:
          description: "Wrong credentials"
        400:
          $ref: '#/responses/400'
        500:
          $ref: '#/responses/500'

  /api/v1/template/new:
    post:
      tags:
        - Templates
      summary: "Add new assessment template"
      description: "Add new assessment template"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: My new assessment template name.
              status:
                type: string
                enum:
                  - active
                  - hidden
                default: active
      responses:
        201:
          description: "Added successfully"
          schema:
            $ref: '#/definitions/Template'
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/templates:
    get:
      tags:
        - Templates
      summary: "Get templates"
      description: "Get assessment template list"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Assessment template's list"
          schema:
            $ref: '#/definitions/Templates'
        204:
          description: No data
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/details:
    get:
      tags:
        - Templates
      summary: "Get templates details with questions and groups"
      description: "Get templates details with questions and groups"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Template details list"
          schema:
            $ref: '#/definitions/Template.Details'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/detail/{templateId}:
    get:
      tags:
        - Templates
      summary: "Get template details by id"
      description: "Get template detailed data by specific template identifier"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: path
          name: templateId
          required: true
          schema:
            type: number
            example: 1
          description: Template Id to get the record
      responses:
        200:
          description: Template data
          schema:
            $ref: '#/definitions/Template.Detail'
        204:
          description: No data
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/{templateId}:
    get:
      tags:
        - Templates
      summary: "Get template by id"
      description: "Get template data by specific template identifier"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: path
          name: templateId
          required: true
          schema:
            type: number
            example: 1
          description: Template Id to get the record
      responses:
        200:
          description: Template data
          schema:
            $ref: '#/definitions/Template'
        204:
          description: No data
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
    put:
      tags:
        - Templates
      summary: "Update template by id"
      description: "Update template data by specific template identifier"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: My new assessment template name.
              status:
                type: string
                enum:
                  - active
                  - hidden
                default: active
        - in: path
          name: templateId
          required: true
          schema:
            type: number
            example: 1
          description: Template Id to update record
      responses:
        204:
          description: Resource updated successfully
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/group/new:
    post:
      tags:
        - Template groups
      description: Creates new template group
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - templateId
              - text
            properties:
              text:
                type: string
                example: My new template group name.
              templateId:
                type: number
                example: 1
      responses:
        201:
          description: "Added successfully"
          schema:
            $ref: '#/definitions/Template.Group'
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/groups:
    get:
      tags:
        - Template groups
      description: Get template group list
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Template group list"
          schema:
            $ref: '#/definitions/Template.Groups'
        204:
          description: No data
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/group/question/new:
    post:
      tags:
        - Template group questions
      description: Creates new template group question
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - groupId
              - text
            properties:
              text:
                type: string
                example: My new template group question.
              groupId:
                description: Template question group Id
                type: number
                example: 1
      responses:
        201:
          description: "Added successfully"
          schema:
            $ref: '#/definitions/Template.Group.Question'
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/group/{groupId}:
    get:
      tags:
        - Template groups
      summary: "Get template group by id"
      description: "Get template group data by specific template group identifier"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: path
          name: groupId
          required: true
          schema:
            type: number
            example: 1
          description: Template group Id to get the record
      responses:
        200:
          description: Template group
          schema:
            $ref: '#/definitions/Template.Group'
        204:
          description: No data
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
    put:
      tags:
        - Template groups
      summary: "Update template group by id"
      description: "Update template group data by specific template group identifier"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - text
            properties:
              text:
                type: string
                example: My new template group name.
              status:
                type: string
                enum:
                  - active
                  - hidden
                default: active
        - in: path
          name: groupId
          required: true
          schema:
            type: number
            example: 1
          description: Template group Id to update record
      responses:
        204:
          description: Resource updated successfully
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/template/group/question/{questionId}:
    get:
      tags:
        - Template group questions
      summary: "Get template question by id"
      description: "Get template question data by specific template question identifier"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: path
          name: questionId
          required: true
          schema:
            type: number
            example: 1
          description: Template question Id to get the record
      responses:
        200:
          description: Template question
          schema:
            $ref: '#/definitions/Template.Group.Question'
        204:
          description: No data
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
    put:
      tags:
        - Template group questions
      summary: "Update template question by id"
      description: "Update template question data by specific template question identifier"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - text
            properties:
              text:
                type: string
                example: My new template question text.
              status:
                type: string
                enum:
                  - active
                  - hidden
                default: active
        - in: path
          name: questionId
          required: true
          schema:
            type: number
            example: 1
          description: Template question Id to update record
      responses:
        204:
          description: Resource updated successfully
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/assessment/new:
    post:
      tags:
        - Assessment actions
      description: Creates new assessment
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - templateId
            properties:
              templateId:
                description: Template id
                type: number
                example: 1
      responses:
        201:
          description: "Added successfully"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/assessments:
    get:
      tags:
        - Assessment actions
      summary: Get assessment list
      description: Get assessment list
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Document me" # TODO: Document this schema
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/assessment/details:
    get:
      tags:
        - Assessment actions
      summary: Get assessment details
      description: Get assessment details with groups, questions, answers and attachements
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Document me" # TODO: Document this schema
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/upload:
    post:
      tags:
        - File upload
      description: Upload a file
      consumes:
        - multipart/form-data
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: formData
          name: file
          type: file
          required: true
          description: The file to upload
        - in: formData
          name: owner
          description: Owner type value
          type: string
          required: true
          enum:
            - user
            - question
        - in: formData
          name: ownerId
          required: true
          description: Owner identifier
          type: number
      responses:
        201:
          description: "File uploaded"
        400:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /api/v1/download/{fileHash}:
    get:
      tags:
        - File download
      description: Download file by hash name
      consumes:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: path
          name: fileHash
          schema:
            type: string
            example: 1621365381738-46e168e9-8f85-4c0d-95f9-bf84c08f7bbd
          required: true
          description: File hash name
      responses:
        200:
          description: "File downloading"
        404:
          $ref: '#/responses/400'
        401:
          $ref: '#/responses/401'
        500:
          $ref: '#/responses/500'
  /health-check:
    get:
      tags:
        - Info
        - Version
      summary: "Check the status of the service"
      description: "If the service is up and running correctly the response will be 'UP'"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "Service is up and healthy"
          schema:
            $ref: "#/definitions/Health"
        500:
          $ref: '#/responses/500'



responses:
  400:
    description: Validation Error | Bad Request
    schema:
      $ref: '#/definitions/JoyError'
  401:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Unauthorized'
  500:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'

definitions:
  Health:
    type: object
    properties:
      status:
        type: string
        enum:
          - UP
          - DOWN
      version:
        type: string
        example: 1.0.0
  Template:
    type: object
    properties:
      id:
        type: number
        example: 1
      name:
        type: string
        example: Ethical Trading Initiative
      status?:
        type: string
        enum:
          - active
          - hidden
        example: active
      updatedAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'
      createdAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'
  Templates:
    type: array
    items:
      $ref: '#/definitions/Template'
  Template.Group:
    type: object
    properties:
      id:
        type: number
        example: 1
      templateId:
        type: number
        example: 1
      text:
        type: string
        example: Employment is freely chosen
      status?:
        type: string
        enum:
          - active
          - hidden
        example: active
      updatedAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'
      createdAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'
  Template.Groups:
    type: array
    items:
      $ref: '#/definitions/Template.Group'
  Template.Group.Question:
    type: object
    properties:
      id:
        type: number
        example: 1
      groupId:
        description: Question group Id
        type: number
        example: 1
      text:
        description: Question text
        type: string
        example: There is no forced, bonded or involuntary prison labour
      status?:
        type: string
        enum:
          - active
          - hidden
          - removed
        example: active
      updatedAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'
      createdAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'
  Template.Groups.Questions:
    type: array
    items:
      $ref: '#/definitions/Template.Group.Question'
  Template.Detail:
    allOf:
      - $ref: '#/definitions/Template'
      - type: object
        properties:
          groups:
            type: array
            items:
              allOf:
                - $ref: '#/definitions/Template.Group'
                - type: object
                  properties:
                    questions:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/definitions/Template.Group.Question'
  Template.Details:
    type: array
    items:
      allOf:
        - $ref: '#/definitions/Template.Detail'
        - type: object
  Dates:
    type: object
    properties:
      updatedAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'
      createdAt?:
        type: string
        example: '2021-05-15T14:10:49.000Z'

  File:
    allOf:
      - type: object
      - properties:
          id:
            type: number
            example: 1
          ownerId:
            type: number
            example: 1
          owner:
            type: string
            enum:
              - user
              - answer
            example: answer
          originalName:
            type: string
            example: my-document.pdf
          name:
            type: string
            example: 1621365381738-46e168e9-8f85-4c0d-95f9-bf84c08f7bbd
          extension:
            type: string
            example: .pdf
          mime:
            type: string
            example: application/pdf
          status:
            type: string
            enum:
              - active
              - removed
            example: active
      - $ref: '#/definitions/Dates'
  Files:
    type: array
    items:
      allOf:
        - type: object
        - $ref: '#/definitions/File'
  Authentication:
    type: string
    format: JWT
    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGUiOiJiYXNpYyIsImVtYWlsIjoidXNlcm5hbWVAZW1haWwuY29tIiwiaWF0IjoxNjIwOTQzNzY5LCJleHAiOjI4MjA5NDM3Njl9.yW5cwC_sOlQwWtJKIcReFX17YPwZG3OeO1MzA-hGbjY
  Error:
    type: string
    example: Internal Server Error
  Unauthorized:
    type: string
    example: Unauthorized
  JoyError:
    type: object
    properties:
      message:
        type: string
        example: Invalid data provided
      details:
        type: array
        items:
          type: object
          properties:
            message:
              type: string
              example: '"Role" must be one of [user, supplier]'
            context:
              type: object
              properties:
                valids?:
                  description: When enum values are specified
                  type: array
                  items:
                    type: string
                label:
                  type: string
                  example: Role
                value:
                  type: string
                  description: User input value which was evaluated
                key:
                  type: string
            type?:
              type: string
            path?:
              type: array
              items:
                type: string


