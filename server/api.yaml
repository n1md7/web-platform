swagger: "2.0"
info:
  title: "Swagger API documentation"
  description: >
    This is an example Koa API.
  version: "1.0.0"
host: "localhost:8080"
schemes:
  - "http"
tags:
  - name: Templates
    description: Template related actions
  - name: Template groups
    description: Template group related actions
  - name: Users
    description: User related actions
  - name: Version
    description: App version
  - name: Info
    description: App information related actions

paths:
  /api/v1/user/new:
    post:
      tags:
        - Users
      summary: "UserModel registration"
      description: "Creates new user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            type: "object"
            required:
              - email
              - password
              - confirmPassword
              - role
            properties:
              email:
                type: "string"
                example: "username@email.com"
              role:
                type: "string"
                example: "user"
              password:
                type: "string"
                example: "secret123"
              confirmPassword:
                type: "string"
                example: "secret123"
      responses:
        200:
          description: "Registration is successful"
          schema:
            type: "string"
        400:
          description: "Bad request happened"
  /api/v1/user/auth:
    post:
      tags:
        - Users
      summary: "Authentication request"
      description: "Authenticates user based on email and password"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "E-mail and password to authenticate"
          required: true
          schema:
            type: "object"
            required:
              - email
              - password
            properties:
              email:
                type: "string"
                example: "username@email.com"
              password:
                type: "string"
                example: "secret123"
              rememberMe:
                type: "boolean"
                example: false

      responses:
        200:
          description: "Credentials are correct"
          schema:
            type: "string"
        401:
          description: "Wrong credentials"
        400:
          description: "Bad request happened"
  /api/v1/template/new:
    post:
      tags:
        - Templates
      summary: "Add new assessment template"
      description: "Add new assessment template"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: My new assessment template name.
      responses:
        201:
          description: "Added successfully"
          schema:
            $ref: '#/definitions/Template'
        400:
          description: "Validation error"
        500:
          $ref: '#/responses/500'
  /api/v1/templates:
    get:
      tags:
        - Templates
      summary: "Get templates"
      description: "Get assessment template list"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Assessment template's list"
          schema:
            $ref: '#/definitions/Templates'
        401:
          description: "Unauthorized"
        500:
          $ref: '#/responses/500'
  /api/v1/template/group/new:
    post:
      tags:
        - Template groups
      description: Creates new template group
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - templateId
              - text
            properties:
              text:
                type: string
                example: My new template group name.
              templateId:
                type: number
                example: 1
      responses:
        201:
          description: "Added successfully"
          schema:
            $ref: '#/definitions/Template.Group'
        400:
          description: "Validation error"
        500:
          $ref: '#/responses/500'
  /api/v1/template/groups:
    get:
      tags:
        - Template groups
      description: Get template group list
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: auth-token
          description: Authentication JWT header
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        200:
          description: "Template group list"
          schema:
            $ref: '#/definitions/Template.Groups'
        401:
          description: "Unauthorized"
        500:
          $ref: '#/responses/500'

  /health-check:
    get:
      tags:
        - Info
        - Version
      summary: "Check the status of the service"
      description: "If the service is up and running correctly the response will be 'UP'"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "Service is up and healthy"
          schema:
            $ref: "#/definitions/Health"
        500:
          $ref: '#/responses/500'

responses:
  500:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'

definitions:
  Health:
    type: object
    properties:
      status:
        type: string
        enum:
          - UP
          - DOWN
      version:
        type: string
  Template:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      status:
        type: string
        enum:
          - active
          - hidden
      updatedAt:
        type: string
      createdAt:
        type: string
  Templates:
    type: array
    items:
      $ref: '#/definitions/Template'
  Template.Group:
    type: object
    properties:
      id:
        type: number
      templateId:
        type: number
      text:
        type: string
      status:
        type: string
        enum:
          - active
          - hidden
      updatedAt:
        type: string
      createdAt:
        type: string
  Template.Groups:
    type: array
    items:
      $ref: '#/definitions/Template/Group'
  Authentication:
    type: string
    format: JWT
    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGUiOiJiYXNpYyIsImVtYWlsIjoidXNlcm5hbWVAZW1haWwuY29tIiwiaWF0IjoxNjIwOTQzNzY5LCJleHAiOjI4MjA5NDM3Njl9.yW5cwC_sOlQwWtJKIcReFX17YPwZG3OeO1MzA-hGbjY
  Error:
    type: string
    example: Internal Server Error


